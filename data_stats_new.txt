
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin14.5.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls(all = TRUE))
> 
> source(file = "R/packages.R")
> source(file = "R/utils.R")
> source(file = "R/variables.R")
> source(file = "R/mysql.R")
> 
> library(RMySQL)
> library(ggplot2)
> library(reshape)
> library(sqldf)
> library(digest)
> library(xtable)
> 
> print("Running database queries...")
[1] "Running database queries..."
> con <- dbConnect(dbDriver("MySQL"), user = mysql.user, password = mysql.passwd, 
+                  dbname = mysql.db, host = mysql.host)
> 
> # Overall project statistics
> # if (file.exists(overall.dataset.stats)) {
> #   print(sprintf("%s file found", overall.dataset.stats))
> #   projectstats <- read.csv(file = overall.dataset.stats)
> # } else {
> #   print(sprintf("File not found %s", overall.dataset.stats))
> #   print("Running project stats query, this will take long...")
> #   # This will take a LONG time. Think >0.5 hours.
> #   res <- dbSendQuery(con, "select concat(u.login, '/', p.name) as name, (select count(*) from commits c, project_commits pc    where pc.project_id = p.id and pc.commit_id = c.id) as commits, (select count(*) from watchers where repo_id = p.id) as watchers, (select count(*) from pull_requests where base_repo_id = p.id)   as pull_requests, (select count(*) from issues where repo_id = p.id) as issues, (select count(*)    from project_members where repo_id = p.id) as project_members, (select count(distinct c.author_id)  from commits c, project_commits pc where pc.project_id = p.id and pc.commit_id = c.id) as contributors, (select count(*) from projects p1 where p1.forked_from = p.id) as forks, (select count(*) from issue_comments ic, issues i where ic.issue_id=i.id and i.repo_id = p.id) as issue_comments, (select count(*) from pull_requests pr, pull_request_comments prc where pr.base_repo_id=p.id and prc.pull_request_id = pr.id) as pull_req_comments, p.language from projects  p, users u where p.forked_from is null and p.deleted is false and u.id = p.owner_id group by p.id;")
> #   projectstats <- fetch(res, n = -1)
> #   write.csv(projectstats, file = overall.dataset.stats)
> #   projectstats
> # }
> 
> # Total repos
> res <- dbSendQuery(con, "select count(*) as cnt from projects")
> repos <- fetch(res, n = -1)
> print(sprintf("Total repos: %d",repos$cnt))
[1] "Total repos: 64263412"
> 
> # Total users
> res <- dbSendQuery(con, "select count(*) as cnt from users")
> users <- fetch(res, n = -1)
> print(sprintf("Total users: %d",users$cnt))
[1] "Total users: 19925203"
> 
> # Original repos
> res <- dbSendQuery(con, "select count(*) as cnt from projects where forked_from is null and deleted is false and name not regexp '^.*\\.github\\.com$' and name <> 'try_git' and name <> 'dotfiles' and name <> 'vimfiles'")
